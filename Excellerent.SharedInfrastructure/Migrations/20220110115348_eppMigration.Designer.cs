// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Migrations
{
    [DbContext(typeof(EPPContext))]
    [Migration("20220110115348_eppMigration")]
    partial class eppMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupSetPermissions");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyValue")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("8251a0e6-776f-44af-9ed1-aee8657f5b07"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 567, DateTimeKind.Local).AddTicks(566),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "create_timesheet",
                            Level = "1",
                            Name = "addtimeentry",
                            ParentCode = "001",
                            PermissionCode = "00101"
                        },
                        new
                        {
                            Guid = new Guid("33c1e31e-e2ff-4757-a181-af37e7c29723"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7240),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet",
                            Level = "1",
                            Name = "gettimesheet",
                            ParentCode = "001",
                            PermissionCode = "00102"
                        },
                        new
                        {
                            Guid = new Guid("a13fb875-1aab-4efd-ae6d-6bdd096b6491"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7279),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeEntries",
                            Level = "1",
                            Name = "gettimeentries",
                            ParentCode = "001",
                            PermissionCode = "00103"
                        },
                        new
                        {
                            Guid = new Guid("af4f54bd-59a2-49f0-8423-b825ca05815c"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7282),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_TimeEntry",
                            Level = "1",
                            Name = "updatetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00104"
                        },
                        new
                        {
                            Guid = new Guid("41284cff-ccd7-4eb7-85e1-70e060d4b026"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7363),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_TimeEntry",
                            Level = "1",
                            Name = "deletetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00105"
                        },
                        new
                        {
                            Guid = new Guid("8a7e06a5-a529-4c5a-909c-404399938701"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7378),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetApprovalStatus",
                            Level = "1",
                            Name = "getapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00106"
                        },
                        new
                        {
                            Guid = new Guid("1463b9f3-94df-4820-a0b0-fbd488b40fa9"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7380),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Approve_timesheet",
                            Level = "1",
                            Name = "addapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00107"
                        },
                        new
                        {
                            Guid = new Guid("af2dc477-f07f-41cc-a5a6-8e8e615e5882"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7382),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Reject_TimeSheet",
                            Level = "1",
                            Name = "rejecttimesheet",
                            ParentCode = "001",
                            PermissionCode = "00108"
                        },
                        new
                        {
                            Guid = new Guid("ec11ef4c-3438-422e-a248-3d98041678e1"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7386),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Request_ForReview",
                            Level = "1",
                            Name = "requestforreview",
                            ParentCode = "001",
                            PermissionCode = "00109"
                        },
                        new
                        {
                            Guid = new Guid("b67f3025-1706-495f-8c62-20a0f0a9f674"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7397),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeSheetConfiguration",
                            Level = "1",
                            Name = "gettimesheetconfiguration",
                            ParentCode = "001",
                            PermissionCode = "00110"
                        },
                        new
                        {
                            Guid = new Guid("d2d80de0-d999-44a6-97ae-5c4c77017e0a"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7399),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Resource",
                            Level = "1",
                            Name = "addassignresource",
                            ParentCode = "002",
                            PermissionCode = "00201"
                        },
                        new
                        {
                            Guid = new Guid("e3dbb8e3-6bdf-4650-b518-859b6c505c90"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7402),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Resources",
                            Level = "1",
                            Name = "getassignresource",
                            ParentCode = "002",
                            PermissionCode = "00202"
                        },
                        new
                        {
                            Guid = new Guid("a804b779-6d2a-4828-b6fa-b0a8b6381ea7"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7404),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAssignedResourceById",
                            Level = "1",
                            Name = "getassignresourcebyid",
                            ParentCode = "002",
                            PermissionCode = "00203"
                        },
                        new
                        {
                            Guid = new Guid("436b3507-21ff-42cf-a28c-afe1b1134e0d"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7406),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Resources",
                            Level = "1",
                            Name = "updateassignresource",
                            ParentCode = "002",
                            PermissionCode = "00204"
                        },
                        new
                        {
                            Guid = new Guid("8b4f770b-1b95-4151-8943-aaff3751698e"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7408),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Resource",
                            Level = "1",
                            Name = "deleteassignresource",
                            ParentCode = "002",
                            PermissionCode = "00205"
                        },
                        new
                        {
                            Guid = new Guid("785061a1-8c52-486d-b1ed-f9232ee57118"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7410),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Project",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00206"
                        },
                        new
                        {
                            Guid = new Guid("0d0fb35c-b4c5-459a-81d3-0d75322d436e"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7412),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Project",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00207"
                        },
                        new
                        {
                            Guid = new Guid("28d3af27-8b99-45a3-bdf8-e9a5d903a980"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7418),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Project",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00208"
                        },
                        new
                        {
                            Guid = new Guid("129eafb0-3716-4645-bb40-21e5c053bf42"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7420),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Project",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00209"
                        },
                        new
                        {
                            Guid = new Guid("da889609-4a49-43f7-be8e-0b9d349bc1b0"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7422),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddProjectStatus",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00210"
                        },
                        new
                        {
                            Guid = new Guid("3d66a5f8-4f68-42b6-a7e7-7e25df6528b9"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7425),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "ViewProjectStatus",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00211"
                        },
                        new
                        {
                            Guid = new Guid("773fa2d1-5f24-48a9-bb65-a2a6b9c33119"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7427),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetProjectStatusById",
                            Level = "1",
                            Name = "getprojectstatusbyid",
                            ParentCode = "002",
                            PermissionCode = "00212"
                        },
                        new
                        {
                            Guid = new Guid("cefa6314-f66d-4101-bd3b-4cc7535115ca"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7430),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveProjectStatus ",
                            Level = "1",
                            Name = "delete",
                            ParentCode = "002",
                            PermissionCode = "00213"
                        },
                        new
                        {
                            Guid = new Guid("c699f4b4-cf9f-45d1-821c-5e587ad95977"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7432),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetClient",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00214"
                        },
                        new
                        {
                            Guid = new Guid("609b40aa-9e3c-44f6-9b4d-d4f97104a58b"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7434),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddClient",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00215"
                        },
                        new
                        {
                            Guid = new Guid("a27dbe20-a255-40bc-9b57-9769fb37f947"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7437),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "EditClient",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00216"
                        },
                        new
                        {
                            Guid = new Guid("6ee3756b-00e4-47e5-a692-1093df3f69cd"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7439),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveClient",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00217"
                        },
                        new
                        {
                            Guid = new Guid("3087eb91-13cd-4078-b698-74f8b7a37b87"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7441),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAllEmployees",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00218"
                        },
                        new
                        {
                            Guid = new Guid("fc259008-91a6-4c3b-b31c-1bf042c27f32"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7443),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetEmployeesById",
                            Level = "1",
                            Name = "getbyid",
                            ParentCode = "002",
                            PermissionCode = "00219"
                        },
                        new
                        {
                            Guid = new Guid("b58ecd8b-c2d3-4aa1-b2b2-e4addaff1e62"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7445),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "0",
                            Name = "employeeadmin",
                            ParentCode = "",
                            PermissionCode = "003"
                        },
                        new
                        {
                            Guid = new Guid("6ad60d95-c14c-4ef3-b5c4-c964e8c16193"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7449),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Employee",
                            Level = "1",
                            Name = "createemployee",
                            ParentCode = "003",
                            PermissionCode = "00301"
                        },
                        new
                        {
                            Guid = new Guid("d4f4cc8e-6faf-4b8d-a406-7e40d8201416"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7451),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Employee",
                            Level = "1",
                            Name = "viewemployee",
                            ParentCode = "003",
                            PermissionCode = "00302"
                        },
                        new
                        {
                            Guid = new Guid("55c9013f-5915-4889-afa2-d9b2cc4d3e81"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7454),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Employee",
                            Level = "1",
                            Name = "updateemployee",
                            ParentCode = "003",
                            PermissionCode = "00303"
                        },
                        new
                        {
                            Guid = new Guid("9cf8820a-2b41-4884-beff-b7b4381ee620"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7458),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_My_Profile",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "003",
                            PermissionCode = "00304"
                        },
                        new
                        {
                            Guid = new Guid("61bb2c99-68a7-4dbb-acb0-090babd7e659"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7460),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_My_Profile",
                            Level = "1",
                            Name = "viewmyprofile",
                            ParentCode = "003",
                            PermissionCode = "00305"
                        },
                        new
                        {
                            Guid = new Guid("fe3966ea-93e1-45f4-98ff-abad9e9094f2"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7462),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_My_Profile",
                            Level = "1",
                            Name = "updatemyprofile",
                            ParentCode = "003",
                            PermissionCode = "00306"
                        },
                        new
                        {
                            Guid = new Guid("f2171e55-615f-49f5-b936-0b7a43ef3315"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7464),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "004"
                        },
                        new
                        {
                            Guid = new Guid("751fb8c4-3f8f-427d-badd-e84a450d7675"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7466),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Group",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "004",
                            PermissionCode = "00401"
                        },
                        new
                        {
                            Guid = new Guid("02cb3cdf-e4cf-42e5-9b67-cd4e0e9cd93e"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7468),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Group",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "004",
                            PermissionCode = "00402"
                        },
                        new
                        {
                            Guid = new Guid("b6a6fd29-2240-44fb-a991-907a070c9c14"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7470),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Group",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "004",
                            PermissionCode = "00403"
                        },
                        new
                        {
                            Guid = new Guid("08a2b653-9530-4814-a836-76e1d17cbe63"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7472),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Add_User",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "004",
                            PermissionCode = "00404"
                        },
                        new
                        {
                            Guid = new Guid("1d5bfd62-286a-43ed-b80b-67767f5db400"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7476),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_User",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "004",
                            PermissionCode = "00405"
                        },
                        new
                        {
                            Guid = new Guid("34f79aa9-ced9-4bf4-9fc6-aa370d2a1dc8"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7478),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_User",
                            Level = "1",
                            Name = "updateuser",
                            ParentCode = "004",
                            PermissionCode = "00406"
                        },
                        new
                        {
                            Guid = new Guid("a604e5f1-ae95-4533-87b6-aade4c3866e8"),
                            CreatedDate = new DateTime(2022, 1, 10, 14, 53, 47, 572, DateTimeKind.Local).AddTicks(7480),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_User",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00407"
                        });
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
